package ${package.Entity};

#foreach($pkg in ${table.importPackages})
import ${pkg};
#end
import com.iotcomm.core.entity.BaseEntity;
import com.baomidou.mybatisplus.annotation.*;
#if(${swagger2})
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
#if(${entityLombokModel})
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;
#end

import ${cfg.myPackage}.dto.${entity}DTO;
import ${cfg.myPackage}.vo.${entity}VO;
import ${cfg.myPackage}.utils.Orika;

/**
 * @author ${author}
 * @since ${cfg.dateTime}
 * @describe $!{table.comment}实体类
 */
#if(${entityLombokModel})
@Data
#end
@EqualsAndHashCode(callSuper = true)
@Accessors(chain = true)
@TableName("${table.name}")
#if(${swagger2})
@ApiModel(value = "${entity}对象", description = "$!{table.comment}")
#end
#if(${superEntityClass})
public class ${entity} extends ${superEntityClass}#if(${activeRecord})#end {
#elseif(${activeRecord})
public class ${entity} extends Model<${entity}> {
#else
public class ${entity} implements Serializable{
#end

private static final long serialVersionUID=1L;
## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})


    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
    #end

    #if(${field.keyFlag})
    ## 主键
        #if(${field.keyIdentityFlag})
        @TableId(value = "${field.name}", type = IdType.AUTO)
        #elseif(!$null.isNull(${idType}) && "$!idType" != "")
        @TableId(value = "${field.name}", type = IdType.${idType})
        #elseif(${field.convert})
        @TableId("${field.name}")
        #end
    ## 普通字段
    #elseif(${field.fill})
    ## -----   存在字段填充设置   -----
        #if(${field.convert})
        @TableField(value = "${field.name}", fill = FieldFill.${field.fill})
        #else
        @TableField(fill = FieldFill.${field.fill})
        #end
    #else
    @TableField("${field.name}")
    #end

    #if("$!field.comment" != "")
        #if(${swagger2})
        @ApiModelProperty(value = "${field.comment}")
        #else
        /**
         * ${field.comment}
         */
        #end
    #end

## 乐观锁注解
    #if(${versionFieldName}==${field.name})
    @Version
    #end
## 逻辑删除注解
    #if(${logicDeleteFieldName}==${field.name})
    @TableLogic(value = "0", delval = "1")
    #end
private ${field.propertyType} ${field.propertyName};
#end
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
    #foreach($field in ${table.fields})
        #if(${field.propertyType.equals("boolean")})
            #set($getprefix="is")
        #else
            #set($getprefix="get")
        #end

    public ${field.propertyType} ${getprefix}${field.capitalName}(){
            return ${field.propertyName};
            }

        #if(${entityBuilderModel})
        public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}){
        #else
        public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        #end
            this.${field.propertyName} = ${field.propertyName};
        #if(${entityBuilderModel})
                return this;
        #end
            }
    #end
#end

#if(${entityColumnConstant})
    #foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} ="${field.name}" ;

    #end
#end
###if(${activeRecord})
##@Override
##protected Serializable pkVal(){
##    #if(${keyPropertyName})
##            return this.${keyPropertyName};
##    #else
##            return null;
##    #end
##        }
##
###end
#if(!${entityLombokModel})
    @Override
    public String toString() {
        return "${entity}{" +
    #foreach($field in ${table.fields})
        #if($!{foreach.index}==0)
                "${field.propertyName}=" + ${field.propertyName} +
        #else
                ", ${field.propertyName}=" + ${field.propertyName} +
        #end
    #end
        "}";
    }
#end

    public static ${entity} parse(${entity}DTO dto){
        ${entity} ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)} = Orika.map(dto, ${entity}.class);
        return ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)};
    }

    public static ${entity}VO parseVO(${entity} ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}){
        ${entity}VO vo = Orika.map(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}, ${entity}VO.class);
        return vo;
    }
}